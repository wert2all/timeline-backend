// Code generated by ent, DO NOT EDIT.

package event

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the event type in the database.
	Label = "event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldTime holds the string denoting the time field in the database.
	FieldTime = "time"
	// FieldShowTime holds the string denoting the showtime field in the database.
	FieldShowTime = "show_time"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldPreviewlyImageID holds the string denoting the previewly_image_id field in the database.
	FieldPreviewlyImageID = "previewly_image_id"
	// EdgeTimeline holds the string denoting the timeline edge name in mutations.
	EdgeTimeline = "timeline"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// Table holds the table name of the event in the database.
	Table = "events"
	// TimelineTable is the table that holds the timeline relation/edge.
	TimelineTable = "events"
	// TimelineInverseTable is the table name for the Timeline entity.
	// It exists in this package in order to avoid circular dependency with the "timeline" package.
	TimelineInverseTable = "timelines"
	// TimelineColumn is the table column denoting the timeline relation/edge.
	TimelineColumn = "timeline_event"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "tag_event"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
)

// Columns holds all SQL columns for event fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldDate,
	FieldType,
	FieldTime,
	FieldShowTime,
	FieldTitle,
	FieldDescription,
	FieldURL,
	FieldPreviewlyImageID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "events"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"timeline_event",
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"tag_id", "event_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultShowTime holds the default value on creation for the "showTime" field.
	DefaultShowTime bool
)

// Type defines the type for the "type" enum field.
type Type string

// TypeDefault is the default value of the Type enum.
const DefaultType = TypeDefault

// Type values.
const (
	TypeDefault   Type = "default"
	TypeSelebrate Type = "selebrate"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeDefault, TypeSelebrate:
		return nil
	default:
		return fmt.Errorf("event: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Event queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByTime orders the results by the time field.
func ByTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTime, opts...).ToFunc()
}

// ByShowTime orders the results by the showTime field.
func ByShowTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShowTime, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByPreviewlyImageID orders the results by the previewly_image_id field.
func ByPreviewlyImageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPreviewlyImageID, opts...).ToFunc()
}

// ByTimelineField orders the results by timeline field.
func ByTimelineField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTimelineStep(), sql.OrderByField(field, opts...))
	}
}

// ByTagsCount orders the results by tags count.
func ByTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTagsStep(), opts...)
	}
}

// ByTags orders the results by tags terms.
func ByTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTimelineStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TimelineInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TimelineTable, TimelineColumn),
	)
}
func newTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, TagsTable, TagsPrimaryKey...),
	)
}

// Code generated by ent, DO NOT EDIT.

package account

import (
	"timeline/backend/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldName, v))
}

// PreviewlyToken applies equality check predicate on the "previewly_token" field. It's identical to PreviewlyTokenEQ.
func PreviewlyToken(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldPreviewlyToken, v))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAvatar, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldName, v))
}

// PreviewlyTokenEQ applies the EQ predicate on the "previewly_token" field.
func PreviewlyTokenEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldPreviewlyToken, v))
}

// PreviewlyTokenNEQ applies the NEQ predicate on the "previewly_token" field.
func PreviewlyTokenNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldPreviewlyToken, v))
}

// PreviewlyTokenIn applies the In predicate on the "previewly_token" field.
func PreviewlyTokenIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldPreviewlyToken, vs...))
}

// PreviewlyTokenNotIn applies the NotIn predicate on the "previewly_token" field.
func PreviewlyTokenNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldPreviewlyToken, vs...))
}

// PreviewlyTokenGT applies the GT predicate on the "previewly_token" field.
func PreviewlyTokenGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldPreviewlyToken, v))
}

// PreviewlyTokenGTE applies the GTE predicate on the "previewly_token" field.
func PreviewlyTokenGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldPreviewlyToken, v))
}

// PreviewlyTokenLT applies the LT predicate on the "previewly_token" field.
func PreviewlyTokenLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldPreviewlyToken, v))
}

// PreviewlyTokenLTE applies the LTE predicate on the "previewly_token" field.
func PreviewlyTokenLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldPreviewlyToken, v))
}

// PreviewlyTokenContains applies the Contains predicate on the "previewly_token" field.
func PreviewlyTokenContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldPreviewlyToken, v))
}

// PreviewlyTokenHasPrefix applies the HasPrefix predicate on the "previewly_token" field.
func PreviewlyTokenHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldPreviewlyToken, v))
}

// PreviewlyTokenHasSuffix applies the HasSuffix predicate on the "previewly_token" field.
func PreviewlyTokenHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldPreviewlyToken, v))
}

// PreviewlyTokenEqualFold applies the EqualFold predicate on the "previewly_token" field.
func PreviewlyTokenEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldPreviewlyToken, v))
}

// PreviewlyTokenContainsFold applies the ContainsFold predicate on the "previewly_token" field.
func PreviewlyTokenContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldPreviewlyToken, v))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldAvatar, v))
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldAvatar, v))
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldAvatar, v))
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldAvatar, v))
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldAvatar, v))
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldAvatar, v))
}

// HasTimeline applies the HasEdge predicate on the "timeline" edge.
func HasTimeline() predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TimelineTable, TimelineColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTimelineWith applies the HasEdge predicate on the "timeline" edge with a given conditions (other predicates).
func HasTimelineWith(preds ...predicate.Timeline) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := newTimelineStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Account {
	return predicate.Account(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Account) predicate.Account {
	return predicate.Account(sql.NotPredicates(p))
}

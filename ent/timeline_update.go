// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"timeline/backend/ent/account"
	"timeline/backend/ent/event"
	"timeline/backend/ent/predicate"
	"timeline/backend/ent/timeline"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TimelineUpdate is the builder for updating Timeline entities.
type TimelineUpdate struct {
	config
	hooks    []Hook
	mutation *TimelineMutation
}

// Where appends a list predicates to the TimelineUpdate builder.
func (tu *TimelineUpdate) Where(ps ...predicate.Timeline) *TimelineUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TimelineUpdate) SetName(s string) *TimelineUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TimelineUpdate) SetNillableName(s *string) *TimelineUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (tu *TimelineUpdate) SetAccountID(id int) *TimelineUpdate {
	tu.mutation.SetAccountID(id)
	return tu
}

// SetNillableAccountID sets the "account" edge to the Account entity by ID if the given value is not nil.
func (tu *TimelineUpdate) SetNillableAccountID(id *int) *TimelineUpdate {
	if id != nil {
		tu = tu.SetAccountID(*id)
	}
	return tu
}

// SetAccount sets the "account" edge to the Account entity.
func (tu *TimelineUpdate) SetAccount(a *Account) *TimelineUpdate {
	return tu.SetAccountID(a.ID)
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (tu *TimelineUpdate) AddEventIDs(ids ...int) *TimelineUpdate {
	tu.mutation.AddEventIDs(ids...)
	return tu
}

// AddEvent adds the "event" edges to the Event entity.
func (tu *TimelineUpdate) AddEvent(e ...*Event) *TimelineUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tu.AddEventIDs(ids...)
}

// Mutation returns the TimelineMutation object of the builder.
func (tu *TimelineUpdate) Mutation() *TimelineMutation {
	return tu.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (tu *TimelineUpdate) ClearAccount() *TimelineUpdate {
	tu.mutation.ClearAccount()
	return tu
}

// ClearEvent clears all "event" edges to the Event entity.
func (tu *TimelineUpdate) ClearEvent() *TimelineUpdate {
	tu.mutation.ClearEvent()
	return tu
}

// RemoveEventIDs removes the "event" edge to Event entities by IDs.
func (tu *TimelineUpdate) RemoveEventIDs(ids ...int) *TimelineUpdate {
	tu.mutation.RemoveEventIDs(ids...)
	return tu
}

// RemoveEvent removes "event" edges to Event entities.
func (tu *TimelineUpdate) RemoveEvent(e ...*Event) *TimelineUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TimelineUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TimelineUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TimelineUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TimelineUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TimelineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(timeline.Table, timeline.Columns, sqlgraph.NewFieldSpec(timeline.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(timeline.FieldName, field.TypeString, value)
	}
	if tu.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timeline.AccountTable,
			Columns: []string{timeline.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timeline.AccountTable,
			Columns: []string{timeline.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   timeline.EventTable,
			Columns: []string{timeline.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedEventIDs(); len(nodes) > 0 && !tu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   timeline.EventTable,
			Columns: []string{timeline.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   timeline.EventTable,
			Columns: []string{timeline.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timeline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TimelineUpdateOne is the builder for updating a single Timeline entity.
type TimelineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TimelineMutation
}

// SetName sets the "name" field.
func (tuo *TimelineUpdateOne) SetName(s string) *TimelineUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TimelineUpdateOne) SetNillableName(s *string) *TimelineUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (tuo *TimelineUpdateOne) SetAccountID(id int) *TimelineUpdateOne {
	tuo.mutation.SetAccountID(id)
	return tuo
}

// SetNillableAccountID sets the "account" edge to the Account entity by ID if the given value is not nil.
func (tuo *TimelineUpdateOne) SetNillableAccountID(id *int) *TimelineUpdateOne {
	if id != nil {
		tuo = tuo.SetAccountID(*id)
	}
	return tuo
}

// SetAccount sets the "account" edge to the Account entity.
func (tuo *TimelineUpdateOne) SetAccount(a *Account) *TimelineUpdateOne {
	return tuo.SetAccountID(a.ID)
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (tuo *TimelineUpdateOne) AddEventIDs(ids ...int) *TimelineUpdateOne {
	tuo.mutation.AddEventIDs(ids...)
	return tuo
}

// AddEvent adds the "event" edges to the Event entity.
func (tuo *TimelineUpdateOne) AddEvent(e ...*Event) *TimelineUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tuo.AddEventIDs(ids...)
}

// Mutation returns the TimelineMutation object of the builder.
func (tuo *TimelineUpdateOne) Mutation() *TimelineMutation {
	return tuo.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (tuo *TimelineUpdateOne) ClearAccount() *TimelineUpdateOne {
	tuo.mutation.ClearAccount()
	return tuo
}

// ClearEvent clears all "event" edges to the Event entity.
func (tuo *TimelineUpdateOne) ClearEvent() *TimelineUpdateOne {
	tuo.mutation.ClearEvent()
	return tuo
}

// RemoveEventIDs removes the "event" edge to Event entities by IDs.
func (tuo *TimelineUpdateOne) RemoveEventIDs(ids ...int) *TimelineUpdateOne {
	tuo.mutation.RemoveEventIDs(ids...)
	return tuo
}

// RemoveEvent removes "event" edges to Event entities.
func (tuo *TimelineUpdateOne) RemoveEvent(e ...*Event) *TimelineUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tuo.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the TimelineUpdate builder.
func (tuo *TimelineUpdateOne) Where(ps ...predicate.Timeline) *TimelineUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TimelineUpdateOne) Select(field string, fields ...string) *TimelineUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Timeline entity.
func (tuo *TimelineUpdateOne) Save(ctx context.Context) (*Timeline, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TimelineUpdateOne) SaveX(ctx context.Context) *Timeline {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TimelineUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TimelineUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TimelineUpdateOne) sqlSave(ctx context.Context) (_node *Timeline, err error) {
	_spec := sqlgraph.NewUpdateSpec(timeline.Table, timeline.Columns, sqlgraph.NewFieldSpec(timeline.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Timeline.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, timeline.FieldID)
		for _, f := range fields {
			if !timeline.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != timeline.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(timeline.FieldName, field.TypeString, value)
	}
	if tuo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timeline.AccountTable,
			Columns: []string{timeline.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timeline.AccountTable,
			Columns: []string{timeline.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   timeline.EventTable,
			Columns: []string{timeline.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedEventIDs(); len(nodes) > 0 && !tuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   timeline.EventTable,
			Columns: []string{timeline.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   timeline.EventTable,
			Columns: []string{timeline.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Timeline{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{timeline.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}

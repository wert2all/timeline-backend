// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"timeline/backend/ent/account"
	"timeline/backend/ent/timeline"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Timeline is the model entity for the Timeline schema.
type Timeline struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TimelineQuery when eager-loading is set.
	Edges            TimelineEdges `json:"edges"`
	account_timeline *int
	selectValues     sql.SelectValues
}

// TimelineEdges holds the relations/edges for other nodes in the graph.
type TimelineEdges struct {
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// Event holds the value of the event edge.
	Event []*Event `json:"event,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TimelineEdges) AccountOrErr() (*Account, error) {
	if e.Account != nil {
		return e.Account, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: account.Label}
	}
	return nil, &NotLoadedError{edge: "account"}
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading.
func (e TimelineEdges) EventOrErr() ([]*Event, error) {
	if e.loadedTypes[1] {
		return e.Event, nil
	}
	return nil, &NotLoadedError{edge: "event"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Timeline) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case timeline.FieldID:
			values[i] = new(sql.NullInt64)
		case timeline.FieldName:
			values[i] = new(sql.NullString)
		case timeline.ForeignKeys[0]: // account_timeline
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Timeline fields.
func (t *Timeline) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case timeline.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case timeline.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case timeline.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field account_timeline", value)
			} else if value.Valid {
				t.account_timeline = new(int)
				*t.account_timeline = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Timeline.
// This includes values selected through modifiers, order, etc.
func (t *Timeline) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryAccount queries the "account" edge of the Timeline entity.
func (t *Timeline) QueryAccount() *AccountQuery {
	return NewTimelineClient(t.config).QueryAccount(t)
}

// QueryEvent queries the "event" edge of the Timeline entity.
func (t *Timeline) QueryEvent() *EventQuery {
	return NewTimelineClient(t.config).QueryEvent(t)
}

// Update returns a builder for updating this Timeline.
// Note that you need to call Timeline.Unwrap() before calling this method if this Timeline
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Timeline) Update() *TimelineUpdateOne {
	return NewTimelineClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Timeline entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Timeline) Unwrap() *Timeline {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Timeline is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Timeline) String() string {
	var builder strings.Builder
	builder.WriteString("Timeline(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Timelines is a parsable slice of Timeline.
type Timelines []*Timeline

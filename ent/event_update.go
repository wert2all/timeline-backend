// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"timeline/backend/ent/event"
	"timeline/backend/ent/predicate"
	"timeline/backend/ent/tag"
	"timeline/backend/ent/timeline"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks    []Hook
	mutation *EventMutation
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetDate sets the "date" field.
func (eu *EventUpdate) SetDate(t time.Time) *EventUpdate {
	eu.mutation.SetDate(t)
	return eu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDate(t *time.Time) *EventUpdate {
	if t != nil {
		eu.SetDate(*t)
	}
	return eu
}

// SetType sets the "type" field.
func (eu *EventUpdate) SetType(e event.Type) *EventUpdate {
	eu.mutation.SetType(e)
	return eu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (eu *EventUpdate) SetNillableType(e *event.Type) *EventUpdate {
	if e != nil {
		eu.SetType(*e)
	}
	return eu
}

// SetTime sets the "time" field.
func (eu *EventUpdate) SetTime(s string) *EventUpdate {
	eu.mutation.SetTime(s)
	return eu
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (eu *EventUpdate) SetNillableTime(s *string) *EventUpdate {
	if s != nil {
		eu.SetTime(*s)
	}
	return eu
}

// ClearTime clears the value of the "time" field.
func (eu *EventUpdate) ClearTime() *EventUpdate {
	eu.mutation.ClearTime()
	return eu
}

// SetShowTime sets the "showTime" field.
func (eu *EventUpdate) SetShowTime(b bool) *EventUpdate {
	eu.mutation.SetShowTime(b)
	return eu
}

// SetNillableShowTime sets the "showTime" field if the given value is not nil.
func (eu *EventUpdate) SetNillableShowTime(b *bool) *EventUpdate {
	if b != nil {
		eu.SetShowTime(*b)
	}
	return eu
}

// SetTitle sets the "title" field.
func (eu *EventUpdate) SetTitle(s string) *EventUpdate {
	eu.mutation.SetTitle(s)
	return eu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (eu *EventUpdate) SetNillableTitle(s *string) *EventUpdate {
	if s != nil {
		eu.SetTitle(*s)
	}
	return eu
}

// ClearTitle clears the value of the "title" field.
func (eu *EventUpdate) ClearTitle() *EventUpdate {
	eu.mutation.ClearTitle()
	return eu
}

// SetDescription sets the "description" field.
func (eu *EventUpdate) SetDescription(s string) *EventUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *EventUpdate) SetNillableDescription(s *string) *EventUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// ClearDescription clears the value of the "description" field.
func (eu *EventUpdate) ClearDescription() *EventUpdate {
	eu.mutation.ClearDescription()
	return eu
}

// SetURL sets the "url" field.
func (eu *EventUpdate) SetURL(s string) *EventUpdate {
	eu.mutation.SetURL(s)
	return eu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (eu *EventUpdate) SetNillableURL(s *string) *EventUpdate {
	if s != nil {
		eu.SetURL(*s)
	}
	return eu
}

// ClearURL clears the value of the "url" field.
func (eu *EventUpdate) ClearURL() *EventUpdate {
	eu.mutation.ClearURL()
	return eu
}

// SetPreviewlyImageID sets the "previewly_image_id" field.
func (eu *EventUpdate) SetPreviewlyImageID(i int) *EventUpdate {
	eu.mutation.ResetPreviewlyImageID()
	eu.mutation.SetPreviewlyImageID(i)
	return eu
}

// SetNillablePreviewlyImageID sets the "previewly_image_id" field if the given value is not nil.
func (eu *EventUpdate) SetNillablePreviewlyImageID(i *int) *EventUpdate {
	if i != nil {
		eu.SetPreviewlyImageID(*i)
	}
	return eu
}

// AddPreviewlyImageID adds i to the "previewly_image_id" field.
func (eu *EventUpdate) AddPreviewlyImageID(i int) *EventUpdate {
	eu.mutation.AddPreviewlyImageID(i)
	return eu
}

// ClearPreviewlyImageID clears the value of the "previewly_image_id" field.
func (eu *EventUpdate) ClearPreviewlyImageID() *EventUpdate {
	eu.mutation.ClearPreviewlyImageID()
	return eu
}

// SetPrivate sets the "private" field.
func (eu *EventUpdate) SetPrivate(b bool) *EventUpdate {
	eu.mutation.SetPrivate(b)
	return eu
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (eu *EventUpdate) SetNillablePrivate(b *bool) *EventUpdate {
	if b != nil {
		eu.SetPrivate(*b)
	}
	return eu
}

// SetTimelineID sets the "timeline" edge to the Timeline entity by ID.
func (eu *EventUpdate) SetTimelineID(id int) *EventUpdate {
	eu.mutation.SetTimelineID(id)
	return eu
}

// SetNillableTimelineID sets the "timeline" edge to the Timeline entity by ID if the given value is not nil.
func (eu *EventUpdate) SetNillableTimelineID(id *int) *EventUpdate {
	if id != nil {
		eu = eu.SetTimelineID(*id)
	}
	return eu
}

// SetTimeline sets the "timeline" edge to the Timeline entity.
func (eu *EventUpdate) SetTimeline(t *Timeline) *EventUpdate {
	return eu.SetTimelineID(t.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (eu *EventUpdate) AddTagIDs(ids ...int) *EventUpdate {
	eu.mutation.AddTagIDs(ids...)
	return eu
}

// AddTags adds the "tags" edges to the Tag entity.
func (eu *EventUpdate) AddTags(t ...*Tag) *EventUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.AddTagIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearTimeline clears the "timeline" edge to the Timeline entity.
func (eu *EventUpdate) ClearTimeline() *EventUpdate {
	eu.mutation.ClearTimeline()
	return eu
}

// ClearTags clears all "tags" edges to the Tag entity.
func (eu *EventUpdate) ClearTags() *EventUpdate {
	eu.mutation.ClearTags()
	return eu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (eu *EventUpdate) RemoveTagIDs(ids ...int) *EventUpdate {
	eu.mutation.RemoveTagIDs(ids...)
	return eu
}

// RemoveTags removes "tags" edges to Tag entities.
func (eu *EventUpdate) RemoveTags(t ...*Tag) *EventUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return eu.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EventUpdate) check() error {
	if v, ok := eu.mutation.GetType(); ok {
		if err := event.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Event.type": %w`, err)}
		}
	}
	return nil
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Date(); ok {
		_spec.SetField(event.FieldDate, field.TypeTime, value)
	}
	if value, ok := eu.mutation.GetType(); ok {
		_spec.SetField(event.FieldType, field.TypeEnum, value)
	}
	if value, ok := eu.mutation.Time(); ok {
		_spec.SetField(event.FieldTime, field.TypeString, value)
	}
	if eu.mutation.TimeCleared() {
		_spec.ClearField(event.FieldTime, field.TypeString)
	}
	if value, ok := eu.mutation.ShowTime(); ok {
		_spec.SetField(event.FieldShowTime, field.TypeBool, value)
	}
	if value, ok := eu.mutation.Title(); ok {
		_spec.SetField(event.FieldTitle, field.TypeString, value)
	}
	if eu.mutation.TitleCleared() {
		_spec.ClearField(event.FieldTitle, field.TypeString)
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
	}
	if eu.mutation.DescriptionCleared() {
		_spec.ClearField(event.FieldDescription, field.TypeString)
	}
	if value, ok := eu.mutation.URL(); ok {
		_spec.SetField(event.FieldURL, field.TypeString, value)
	}
	if eu.mutation.URLCleared() {
		_spec.ClearField(event.FieldURL, field.TypeString)
	}
	if value, ok := eu.mutation.PreviewlyImageID(); ok {
		_spec.SetField(event.FieldPreviewlyImageID, field.TypeInt, value)
	}
	if value, ok := eu.mutation.AddedPreviewlyImageID(); ok {
		_spec.AddField(event.FieldPreviewlyImageID, field.TypeInt, value)
	}
	if eu.mutation.PreviewlyImageIDCleared() {
		_spec.ClearField(event.FieldPreviewlyImageID, field.TypeInt)
	}
	if value, ok := eu.mutation.Private(); ok {
		_spec.SetField(event.FieldPrivate, field.TypeBool, value)
	}
	if eu.mutation.TimelineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.TimelineTable,
			Columns: []string{event.TimelineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timeline.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TimelineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.TimelineTable,
			Columns: []string{event.TimelineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timeline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.TagsTable,
			Columns: event.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !eu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.TagsTable,
			Columns: event.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.TagsTable,
			Columns: event.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EventMutation
}

// SetDate sets the "date" field.
func (euo *EventUpdateOne) SetDate(t time.Time) *EventUpdateOne {
	euo.mutation.SetDate(t)
	return euo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDate(t *time.Time) *EventUpdateOne {
	if t != nil {
		euo.SetDate(*t)
	}
	return euo
}

// SetType sets the "type" field.
func (euo *EventUpdateOne) SetType(e event.Type) *EventUpdateOne {
	euo.mutation.SetType(e)
	return euo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableType(e *event.Type) *EventUpdateOne {
	if e != nil {
		euo.SetType(*e)
	}
	return euo
}

// SetTime sets the "time" field.
func (euo *EventUpdateOne) SetTime(s string) *EventUpdateOne {
	euo.mutation.SetTime(s)
	return euo
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableTime(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetTime(*s)
	}
	return euo
}

// ClearTime clears the value of the "time" field.
func (euo *EventUpdateOne) ClearTime() *EventUpdateOne {
	euo.mutation.ClearTime()
	return euo
}

// SetShowTime sets the "showTime" field.
func (euo *EventUpdateOne) SetShowTime(b bool) *EventUpdateOne {
	euo.mutation.SetShowTime(b)
	return euo
}

// SetNillableShowTime sets the "showTime" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableShowTime(b *bool) *EventUpdateOne {
	if b != nil {
		euo.SetShowTime(*b)
	}
	return euo
}

// SetTitle sets the "title" field.
func (euo *EventUpdateOne) SetTitle(s string) *EventUpdateOne {
	euo.mutation.SetTitle(s)
	return euo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableTitle(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetTitle(*s)
	}
	return euo
}

// ClearTitle clears the value of the "title" field.
func (euo *EventUpdateOne) ClearTitle() *EventUpdateOne {
	euo.mutation.ClearTitle()
	return euo
}

// SetDescription sets the "description" field.
func (euo *EventUpdateOne) SetDescription(s string) *EventUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableDescription(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// ClearDescription clears the value of the "description" field.
func (euo *EventUpdateOne) ClearDescription() *EventUpdateOne {
	euo.mutation.ClearDescription()
	return euo
}

// SetURL sets the "url" field.
func (euo *EventUpdateOne) SetURL(s string) *EventUpdateOne {
	euo.mutation.SetURL(s)
	return euo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableURL(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetURL(*s)
	}
	return euo
}

// ClearURL clears the value of the "url" field.
func (euo *EventUpdateOne) ClearURL() *EventUpdateOne {
	euo.mutation.ClearURL()
	return euo
}

// SetPreviewlyImageID sets the "previewly_image_id" field.
func (euo *EventUpdateOne) SetPreviewlyImageID(i int) *EventUpdateOne {
	euo.mutation.ResetPreviewlyImageID()
	euo.mutation.SetPreviewlyImageID(i)
	return euo
}

// SetNillablePreviewlyImageID sets the "previewly_image_id" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillablePreviewlyImageID(i *int) *EventUpdateOne {
	if i != nil {
		euo.SetPreviewlyImageID(*i)
	}
	return euo
}

// AddPreviewlyImageID adds i to the "previewly_image_id" field.
func (euo *EventUpdateOne) AddPreviewlyImageID(i int) *EventUpdateOne {
	euo.mutation.AddPreviewlyImageID(i)
	return euo
}

// ClearPreviewlyImageID clears the value of the "previewly_image_id" field.
func (euo *EventUpdateOne) ClearPreviewlyImageID() *EventUpdateOne {
	euo.mutation.ClearPreviewlyImageID()
	return euo
}

// SetPrivate sets the "private" field.
func (euo *EventUpdateOne) SetPrivate(b bool) *EventUpdateOne {
	euo.mutation.SetPrivate(b)
	return euo
}

// SetNillablePrivate sets the "private" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillablePrivate(b *bool) *EventUpdateOne {
	if b != nil {
		euo.SetPrivate(*b)
	}
	return euo
}

// SetTimelineID sets the "timeline" edge to the Timeline entity by ID.
func (euo *EventUpdateOne) SetTimelineID(id int) *EventUpdateOne {
	euo.mutation.SetTimelineID(id)
	return euo
}

// SetNillableTimelineID sets the "timeline" edge to the Timeline entity by ID if the given value is not nil.
func (euo *EventUpdateOne) SetNillableTimelineID(id *int) *EventUpdateOne {
	if id != nil {
		euo = euo.SetTimelineID(*id)
	}
	return euo
}

// SetTimeline sets the "timeline" edge to the Timeline entity.
func (euo *EventUpdateOne) SetTimeline(t *Timeline) *EventUpdateOne {
	return euo.SetTimelineID(t.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (euo *EventUpdateOne) AddTagIDs(ids ...int) *EventUpdateOne {
	euo.mutation.AddTagIDs(ids...)
	return euo
}

// AddTags adds the "tags" edges to the Tag entity.
func (euo *EventUpdateOne) AddTags(t ...*Tag) *EventUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.AddTagIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearTimeline clears the "timeline" edge to the Timeline entity.
func (euo *EventUpdateOne) ClearTimeline() *EventUpdateOne {
	euo.mutation.ClearTimeline()
	return euo
}

// ClearTags clears all "tags" edges to the Tag entity.
func (euo *EventUpdateOne) ClearTags() *EventUpdateOne {
	euo.mutation.ClearTags()
	return euo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (euo *EventUpdateOne) RemoveTagIDs(ids ...int) *EventUpdateOne {
	euo.mutation.RemoveTagIDs(ids...)
	return euo
}

// RemoveTags removes "tags" edges to Tag entities.
func (euo *EventUpdateOne) RemoveTags(t ...*Tag) *EventUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return euo.RemoveTagIDs(ids...)
}

// Where appends a list predicates to the EventUpdate builder.
func (euo *EventUpdateOne) Where(ps ...predicate.Event) *EventUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EventUpdateOne) check() error {
	if v, ok := euo.mutation.GetType(); ok {
		if err := event.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Event.type": %w`, err)}
		}
	}
	return nil
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Date(); ok {
		_spec.SetField(event.FieldDate, field.TypeTime, value)
	}
	if value, ok := euo.mutation.GetType(); ok {
		_spec.SetField(event.FieldType, field.TypeEnum, value)
	}
	if value, ok := euo.mutation.Time(); ok {
		_spec.SetField(event.FieldTime, field.TypeString, value)
	}
	if euo.mutation.TimeCleared() {
		_spec.ClearField(event.FieldTime, field.TypeString)
	}
	if value, ok := euo.mutation.ShowTime(); ok {
		_spec.SetField(event.FieldShowTime, field.TypeBool, value)
	}
	if value, ok := euo.mutation.Title(); ok {
		_spec.SetField(event.FieldTitle, field.TypeString, value)
	}
	if euo.mutation.TitleCleared() {
		_spec.ClearField(event.FieldTitle, field.TypeString)
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
	}
	if euo.mutation.DescriptionCleared() {
		_spec.ClearField(event.FieldDescription, field.TypeString)
	}
	if value, ok := euo.mutation.URL(); ok {
		_spec.SetField(event.FieldURL, field.TypeString, value)
	}
	if euo.mutation.URLCleared() {
		_spec.ClearField(event.FieldURL, field.TypeString)
	}
	if value, ok := euo.mutation.PreviewlyImageID(); ok {
		_spec.SetField(event.FieldPreviewlyImageID, field.TypeInt, value)
	}
	if value, ok := euo.mutation.AddedPreviewlyImageID(); ok {
		_spec.AddField(event.FieldPreviewlyImageID, field.TypeInt, value)
	}
	if euo.mutation.PreviewlyImageIDCleared() {
		_spec.ClearField(event.FieldPreviewlyImageID, field.TypeInt)
	}
	if value, ok := euo.mutation.Private(); ok {
		_spec.SetField(event.FieldPrivate, field.TypeBool, value)
	}
	if euo.mutation.TimelineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.TimelineTable,
			Columns: []string{event.TimelineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timeline.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TimelineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.TimelineTable,
			Columns: []string{event.TimelineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timeline.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.TagsTable,
			Columns: event.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !euo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.TagsTable,
			Columns: event.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.TagsTable,
			Columns: event.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}

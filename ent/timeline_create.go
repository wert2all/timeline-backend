// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"timeline/backend/ent/account"
	"timeline/backend/ent/event"
	"timeline/backend/ent/timeline"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TimelineCreate is the builder for creating a Timeline entity.
type TimelineCreate struct {
	config
	mutation *TimelineMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (tc *TimelineCreate) SetName(s string) *TimelineCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (tc *TimelineCreate) SetAccountID(id int) *TimelineCreate {
	tc.mutation.SetAccountID(id)
	return tc
}

// SetNillableAccountID sets the "account" edge to the Account entity by ID if the given value is not nil.
func (tc *TimelineCreate) SetNillableAccountID(id *int) *TimelineCreate {
	if id != nil {
		tc = tc.SetAccountID(*id)
	}
	return tc
}

// SetAccount sets the "account" edge to the Account entity.
func (tc *TimelineCreate) SetAccount(a *Account) *TimelineCreate {
	return tc.SetAccountID(a.ID)
}

// AddEventIDs adds the "event" edge to the Event entity by IDs.
func (tc *TimelineCreate) AddEventIDs(ids ...int) *TimelineCreate {
	tc.mutation.AddEventIDs(ids...)
	return tc
}

// AddEvent adds the "event" edges to the Event entity.
func (tc *TimelineCreate) AddEvent(e ...*Event) *TimelineCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tc.AddEventIDs(ids...)
}

// Mutation returns the TimelineMutation object of the builder.
func (tc *TimelineCreate) Mutation() *TimelineMutation {
	return tc.mutation
}

// Save creates the Timeline in the database.
func (tc *TimelineCreate) Save(ctx context.Context) (*Timeline, error) {
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TimelineCreate) SaveX(ctx context.Context) *Timeline {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TimelineCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TimelineCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TimelineCreate) check() error {
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Timeline.name"`)}
	}
	return nil
}

func (tc *TimelineCreate) sqlSave(ctx context.Context) (*Timeline, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TimelineCreate) createSpec() (*Timeline, *sqlgraph.CreateSpec) {
	var (
		_node = &Timeline{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(timeline.Table, sqlgraph.NewFieldSpec(timeline.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(timeline.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := tc.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   timeline.AccountTable,
			Columns: []string{timeline.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.account_timeline = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   timeline.EventTable,
			Columns: []string{timeline.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Timeline.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TimelineUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (tc *TimelineCreate) OnConflict(opts ...sql.ConflictOption) *TimelineUpsertOne {
	tc.conflict = opts
	return &TimelineUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Timeline.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TimelineCreate) OnConflictColumns(columns ...string) *TimelineUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TimelineUpsertOne{
		create: tc,
	}
}

type (
	// TimelineUpsertOne is the builder for "upsert"-ing
	//  one Timeline node.
	TimelineUpsertOne struct {
		create *TimelineCreate
	}

	// TimelineUpsert is the "OnConflict" setter.
	TimelineUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *TimelineUpsert) SetName(v string) *TimelineUpsert {
	u.Set(timeline.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TimelineUpsert) UpdateName() *TimelineUpsert {
	u.SetExcluded(timeline.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Timeline.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TimelineUpsertOne) UpdateNewValues() *TimelineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Timeline.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TimelineUpsertOne) Ignore() *TimelineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TimelineUpsertOne) DoNothing() *TimelineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TimelineCreate.OnConflict
// documentation for more info.
func (u *TimelineUpsertOne) Update(set func(*TimelineUpsert)) *TimelineUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TimelineUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TimelineUpsertOne) SetName(v string) *TimelineUpsertOne {
	return u.Update(func(s *TimelineUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TimelineUpsertOne) UpdateName() *TimelineUpsertOne {
	return u.Update(func(s *TimelineUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *TimelineUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TimelineCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TimelineUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TimelineUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TimelineUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TimelineCreateBulk is the builder for creating many Timeline entities in bulk.
type TimelineCreateBulk struct {
	config
	err      error
	builders []*TimelineCreate
	conflict []sql.ConflictOption
}

// Save creates the Timeline entities in the database.
func (tcb *TimelineCreateBulk) Save(ctx context.Context) ([]*Timeline, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Timeline, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TimelineMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TimelineCreateBulk) SaveX(ctx context.Context) []*Timeline {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TimelineCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TimelineCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Timeline.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TimelineUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (tcb *TimelineCreateBulk) OnConflict(opts ...sql.ConflictOption) *TimelineUpsertBulk {
	tcb.conflict = opts
	return &TimelineUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Timeline.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TimelineCreateBulk) OnConflictColumns(columns ...string) *TimelineUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TimelineUpsertBulk{
		create: tcb,
	}
}

// TimelineUpsertBulk is the builder for "upsert"-ing
// a bulk of Timeline nodes.
type TimelineUpsertBulk struct {
	create *TimelineCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Timeline.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TimelineUpsertBulk) UpdateNewValues() *TimelineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Timeline.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TimelineUpsertBulk) Ignore() *TimelineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TimelineUpsertBulk) DoNothing() *TimelineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TimelineCreateBulk.OnConflict
// documentation for more info.
func (u *TimelineUpsertBulk) Update(set func(*TimelineUpsert)) *TimelineUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TimelineUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TimelineUpsertBulk) SetName(v string) *TimelineUpsertBulk {
	return u.Update(func(s *TimelineUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TimelineUpsertBulk) UpdateName() *TimelineUpsertBulk {
	return u.Update(func(s *TimelineUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *TimelineUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TimelineCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TimelineCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TimelineUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

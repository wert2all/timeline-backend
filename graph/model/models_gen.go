// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AccountSettingInput struct {
	Key   string  `json:"key"`
	Value *string `json:"value,omitempty"`
}

type AccountSettings struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type AddTimeline struct {
	Name      *string `json:"name,omitempty"`
	AccountID int     `json:"accountId"`
}

type ExistTimelineEventInput struct {
	ID               int           `json:"id"`
	TimelineID       int           `json:"timelineId"`
	Date             time.Time     `json:"date"`
	Type             *TimelineType `json:"type,omitempty"`
	Title            *string       `json:"title,omitempty"`
	Description      *string       `json:"description,omitempty"`
	ShowTime         *bool         `json:"showTime,omitempty"`
	URL              *string       `json:"url,omitempty"`
	Tags             []string      `json:"tags,omitempty"`
	PreviewlyImageID *int          `json:"previewlyImageId,omitempty"`
}

type Limit struct {
	From *int `json:"from,omitempty"`
	To   *int `json:"to,omitempty"`
}

type Mutation struct {
}

type PageInfo struct {
	StartCursor *string `json:"startCursor,omitempty"`
	EndCursor   *string `json:"endCursor,omitempty"`
	HasNextPage bool    `json:"hasNextPage"`
}

type Query struct {
}

type SaveAccountInput struct {
	Name     string  `json:"name"`
	About    *string `json:"about,omitempty"`
	AvatarID *int    `json:"avatarID,omitempty"`
}

type ShortAccount struct {
	ID             int                `json:"id"`
	Name           *string            `json:"name,omitempty"`
	PreviewlyToken string             `json:"previewlyToken"`
	AvatarID       *int               `json:"avatarId,omitempty"`
	About          *string            `json:"about,omitempty"`
	Settings       []*AccountSettings `json:"settings"`
}

type ShortTimeline struct {
	ID   int     `json:"id"`
	Name *string `json:"name,omitempty"`
}

type Timeline struct {
	ID      int           `json:"id"`
	Name    *string       `json:"name,omitempty"`
	Account *ShortAccount `json:"account"`
}

type TimelineEvent struct {
	ID               int          `json:"id"`
	Date             time.Time    `json:"date"`
	Type             TimelineType `json:"type"`
	Title            *string      `json:"title,omitempty"`
	Description      *string      `json:"description,omitempty"`
	ShowTime         *bool        `json:"showTime,omitempty"`
	URL              *string      `json:"url,omitempty"`
	Tags             []string     `json:"tags"`
	PreviewlyImageID *int         `json:"previewlyImageId,omitempty"`
}

type TimelineEventInput struct {
	ID               *int          `json:"id,omitempty"`
	TimelineID       int           `json:"timelineId"`
	Date             time.Time     `json:"date"`
	Type             *TimelineType `json:"type,omitempty"`
	Title            *string       `json:"title,omitempty"`
	Description      *string       `json:"description,omitempty"`
	ShowTime         *bool         `json:"showTime,omitempty"`
	URL              *string       `json:"url,omitempty"`
	Tags             []string      `json:"tags,omitempty"`
	PreviewlyImageID *int          `json:"previewlyImageId,omitempty"`
}

type TimelineEvents struct {
	Events []*TimelineEvent `json:"events"`
	Page   *PageInfo        `json:"page"`
}

type User struct {
	ID       int             `json:"id"`
	Name     *string         `json:"name,omitempty"`
	Email    string          `json:"email"`
	IsNew    bool            `json:"isNew"`
	Accounts []*ShortAccount `json:"accounts"`
}

type Status string

const (
	StatusSuccess Status = "success"
	StatusError   Status = "error"
)

var AllStatus = []Status{
	StatusSuccess,
	StatusError,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusSuccess, StatusError:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TimelineType string

const (
	TimelineTypeDefault   TimelineType = "default"
	TimelineTypeSelebrate TimelineType = "selebrate"
)

var AllTimelineType = []TimelineType{
	TimelineTypeDefault,
	TimelineTypeSelebrate,
}

func (e TimelineType) IsValid() bool {
	switch e {
	case TimelineTypeDefault, TimelineTypeSelebrate:
		return true
	}
	return false
}

func (e TimelineType) String() string {
	return string(e)
}

func (e *TimelineType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TimelineType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TimelineType", str)
	}
	return nil
}

func (e TimelineType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
